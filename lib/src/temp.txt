import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_authenticator/amplify_authenticator.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:quix/src/screen/app/app.dart';
import 'package:quix/src/screen/dashboard/dashboard_provider.dart';
import 'amplifyconfiguration.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final sharedPreferences = await SharedPreferences.getInstance();
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider<DashBoardProvider>(
          create: (context) => DashBoardProvider(preferences: sharedPreferences),
        ),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My App',
      theme: ThemeData(
        // Define your app theme
      ),
      home: const AmplifyConfigurationWrapper(),
    );
  }
}

class AmplifyConfigurationWrapper extends StatefulWidget {
  const AmplifyConfigurationWrapper({Key? key}) : super(key: key);

  @override
  _AmplifyConfigurationWrapperState createState() =>
      _AmplifyConfigurationWrapperState();
}

class _AmplifyConfigurationWrapperState
    extends State<AmplifyConfigurationWrapper> {
  bool _isAmplifyConfigured = false;

  @override
  void initState() {
    super.initState();
    _configureAmplify();
  }

  Future<void> _configureAmplify() async {
    try {
      await Amplify.addPlugin(AmplifyAuthCognito());
      await Amplify.configure(amplifyconfig);
      setState(() {
        _isAmplifyConfigured = true;
      });
    } on AmplifyException catch (e) {
      print('Error configuring Amplify: ${e.message}');
    }
  }

  @override
  Widget build(BuildContext context) {
    return _isAmplifyConfigured ? const App() : const CircularProgressIndicator();
  }
}

Future<void> signOutCurrentUser() async {
  try {
    await Amplify.Auth.signOut();
  } on AuthException catch (e) {
    print(e.message);
  }
}


import 'package:flutter/material.dart';
import 'package:provider/provider.dart';


// Amplify Package
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_authenticator/amplify_authenticator.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:quix/src/screen/app/app.dart';
import 'package:quix/src/screen/dashboard/dashboard_provider.dart';


import 'amplifyconfiguration.dart';

void main() {
  // runApp(const MyApp());
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider<DashBoardProvider>(
          create: (context) => DashBoardProvider(),
        )
      ],
      child: MyApp(),
    )
  );
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    _configureAmplify();
  }

  void _configureAmplify() async {
    try {
      await Amplify.addPlugin(AmplifyAuthCognito());
      await Amplify.configure(amplifyconfig);
      safePrint('Successfully configured');
    } on Exception catch (e) {
      safePrint('Error configuring Amplify: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Authenticator(
      signUpForm: SignUpForm.custom(
      fields: [
        SignUpFormField.username(),
        SignUpFormField.password(),
        SignUpFormField.passwordConfirmation(),
        SignUpFormField.email(),
      ],
    ),
      child: const App()
    );
  }
}

Future<void> signOutCurrentUser() async {
  try {
    await Amplify.Auth.signOut();
  } on AuthException catch (e) {
    print(e.message);
  }
}

=================


Future<void> initializeUser() async {
    try {
      // Check if the user is already initialized
      List<User> users = await Amplify.DataStore.query(User.classType);
      if (users.isEmpty) {
        // User not initialized, create a new user
        final newUser = User(id: 'unique_user_id', name: 'John Doe');
        await Amplify.DataStore.save(newUser);
        print({newUser});
        print("User initialized successfully");
      } else {
        print({users});
        print("User already initialized");
      }
    } catch (e) {
      print("Error initializing user: $e");
    }
  }


Future<User?> queryItem(User queriedTodo) async {
  try {
    final request = ModelQueries.get(
      User.classType,
      queriedTodo.modelIdentifier,
    );
    final response = await Amplify.API.query(request: request).response;
    final todo = response.data;
    if (todo == null) {
      safePrint('errors: ${response.errors}');
    }
    print(todo);
    return todo;
  } on ApiException catch (e) {
    safePrint('Query failed: $e');
    return null;
  }
}

Future<List<User?>> queryListItems() async {
  try {
    final request = ModelQueries.list(User.classType);
    final response = await Amplify.API.query(request: request).response;

    final todos = response.data?.items;
    if (todos == null) {
      safePrint('errors: ${response.errors}');
      return const [];
    }
    print({todos});
    return todos;
  } on ApiException catch (e) {
    safePrint('Query failed: $e');
    return const [];
  }
}

